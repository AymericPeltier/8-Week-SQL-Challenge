-- Data with Danny - 8 Week Challenge (Week 2)
-- https://8weeksqlchallenge.com/case-study-2/

-- Done with PostgreSQL

--PART 1: PIZZA METRICS !

--1) How many pizzas were ordered?
--2) How many unique customer orders were made?
--3) How many successful orders were delivered by each runner?
--4) How many of each type of pizza was delivered?
--5) How many Vegetarian and Meatlovers were ordered by each customer?
--6) What was the maximum number of pizzas delivered in a single order?
--7) For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
--8) How many pizzas were delivered that had both exclusions and extras?
--9) What was the total volume of pizzas ordered for each hour of the day?
--10) What was the volume of orders for each day of the week?

--------------------------------------------------------------------------------------------------------------------------------------------------------
-- BEFORE ANSWERING THE QUESTIONS, LET'S BEGIN BY FIXING THE TABLES


    DROP TABLE IF EXISTS customer_orders_cleaned;
    CREATE TEMP TABLE customer_orders_cleaned AS
    SELECT
      order_id,
      customer_id,
      pizza_id,
      CASE
        WHEN exclusions = '' THEN NULL
        WHEN exclusions = 'null' THEN NULL
        ELSE exclusions END as exclusions,
      CASE
        WHEN extras = '' THEN NULL
        WHEN extras = 'null' THEN NULL
        ELSE extras END as extras,
      order_time
    FROM
      customer_orders
    ORDER BY 
      order_id;

---


    DROP TABLE IF EXISTS runner_orders_cleaned;
    CREATE TEMP TABLE runner_orders_cleaned AS WITH first_layer AS (
      SELECT
        order_id,
        runner_id,
        CAST(
          CASE
            WHEN pickup_time = 'null' THEN NULL
            ELSE pickup_time
          END AS timestamp
        ) AS pickup_time,
        CASE
          WHEN distance = '' THEN NULL
          WHEN distance = 'null' THEN NULL
          ELSE distance
        END as distance,
        CASE
          WHEN duration = '' THEN NULL
          WHEN duration = 'null' THEN NULL
          ELSE duration
        END as duration,
        CASE
          WHEN cancellation = '' THEN NULL
          WHEN cancellation = 'null' THEN NULL
          ELSE cancellation
        END as cancellation
      FROM
        runner_orders
    )
    SELECT
      order_id,
      runner_id,
      pickup_time,
      CAST( regexp_replace(distance, '[a-z]+', '' ) AS DECIMAL(5,2) ) AS distance,
    	CAST( regexp_replace(duration, '[a-z]+', '' ) AS INT ) AS duration,
    	cancellation
    FROM
      first_layer;

------------------------------------------------------
--1) How many pizzas were ordered?

    SELECT
      COUNT(pizza_id) AS number_of_pizza_ordered
    FROM 
      customer_orders_cleaned;

| number_of_pizza_ordered |
| ----------------------- |
| 14                      |

------------------------------------------------------
--2) How many unique customer orders were made?

    SELECT
      COUNT(DISTINCT order_id) AS distinct_orders
    FROM
      customer_orders_cleaned;

| distinct_orders |
| --------------- |
| 10              |

------------------------------------------------------
--3) How many successful orders were delivered by each runner?

    SELECT
      COUNT(order_id) AS distinct_orders
    FROM 
      runner_orders_cleaned
    WHERE
      cancellation IS NULL;

| distinct_orders |
| --------------- |
| 8               |

------------------------------------------------------
--4) How many of each type of pizza was delivered?

    SELECT
      C.pizza_id,
      COUNT(C.pizza_id) as pizza_delivered
    FROM
      customer_orders_cleaned AS C
      LEFT JOIN runner_orders_cleaned AS R ON C.order_id = R.order_id
    WHERE
      R.cancellation IS NULL
    GROUP BY
      pizza_id;

| pizza_id | pizza_delivered |
| -------- | --------------- |
| 1        | 9               |
| 2        | 3               |

------------------------------------------------------
--5) How many Vegetarian and Meatlovers were ordered by each customer?

    SELECT
      customer_id,
      SUM(CASE WHEN pizza_id = 1 THEN 1 ELSE 0 END) as meatlovers,
      SUM(CASE WHEN pizza_id = 2 THEN 1 ELSE 0 END) as vegetarians
    FROM 
      customer_orders_cleaned
    GROUP BY
      customer_id
    ORDER BY
      customer_id;

| customer_id | meatlovers | vegetarians |
| ----------- | ---------- | ----------- |
| 101         | 2          | 1           |
| 102         | 2          | 1           |
| 103         | 3          | 1           |
| 104         | 3          | 0           |
| 105         | 0          | 1           |

------------------------------------------------------
--6) What was the maximum number of pizzas delivered in a single order?

    SELECT
      order_id,
      COUNT(pizza_id) as pizzas_delivered
    FROM 
      customer_orders_cleaned
    GROUP BY
      order_id
    ORDER BY
      pizzas_delivered DESC;

| order_id | pizzas_delivered |
| -------- | ---------------- |
| 4        | 3                |
| 10       | 2                |
| 3        | 2                |
| 2        | 1                |
| 7        | 1                |
| 1        | 1                |
| 9        | 1                |
| 8        | 1                |
| 5        | 1                |
| 6        | 1                |

------------------------------------------------------
--7) For each customer, how many delivered pizzas had at least 1 change and how many had no changes?

    SELECT
      customer_id,
      SUM(CASE WHEN (exclusions IS NOT NULL OR extras IS NOT NULL) THEN 1 ELSE 0 END) as changes_performed,
      SUM(CASE WHEN (exclusions IS NULL AND extras IS NULL) THEN 1 ELSE 0 END) as no_changes
    FROM 
      customer_orders_cleaned
    GROUP BY
      customer_id
    ORDER BY
      customer_id;

| customer_id | changes_performed | no_changes |
| ----------- | ----------------- | ---------- |
| 101         | 0                 | 3          |
| 102         | 0                 | 3          |
| 103         | 4                 | 0          |
| 104         | 2                 | 1          |
| 105         | 1                 | 0          |

------------------------------------------------------
--8) How many pizzas were delivered that had both exclusions and extras?

    SELECT
      SUM(CASE WHEN (exclusions IS NOT NULL AND extras IS NOT NULL) THEN 1 ELSE 0 END) as exclusions_and_extra
    FROM 
      customer_orders_cleaned;

| exclusions_and_extra |
| -------------------- |
| 2                    |

------------------------------------------------------
--9) What was the total volume of pizzas ordered for each hour of the day?

    SELECT
      extract(hour from order_time)                                              AS order_hour,
      COUNT(extract(hour from order_time))                                       AS count_pizza_ordered,
      ROUND( 100 * COUNT(extract(hour from order_time))/SUM(COUNT(*)) OVER (),2) AS volume_pizza_ordered
    FROM 
      customer_orders_cleaned
    GROUP BY
      order_hour
    ORDER BY
      order_hour;

| order_hour | count_pizza_ordered | volume_pizza_ordered |
| ---------- | ------------------- | -------------------- |
| 11         | 1                   | 7.14                 |
| 12         | 2                   | 14.29                |
| 13         | 3                   | 21.43                |
| 18         | 3                   | 21.43                |
| 19         | 1                   | 7.14                 |
| 21         | 3                   | 21.43                |
| 23         | 1                   | 7.14                 |

------------------------------------------------------
--10) What was the volume of orders for each day of the week?

    SELECT
      to_char(order_time, 'Day')                                              AS day_ordered,
      COUNT(to_char(order_time, 'Day'))                                       AS count_pizza_ordered,
      ROUND( 100 * COUNT(to_char(order_time, 'Day'))/SUM(COUNT(*)) OVER (),2) AS volume_pizza_ordered
    FROM 
      customer_orders_cleaned
    GROUP BY
      day_ordered
    ORDER BY
      day_ordered;

| day_ordered | count_pizza_ordered | volume_pizza_ordered |
| ----------- | ------------------- | -------------------- |
| Friday      | 1                   | 7.14                 |
| Saturday    | 5                   | 35.71                |
| Thursday    | 3                   | 21.43                |
| Wednesday   | 5                   | 35.71                |

------------------------------------------------------

[View on DB Fiddle](https://www.db-fiddle.com/f/7VcQKQwsS3CTkGRFG7vu98/4)
