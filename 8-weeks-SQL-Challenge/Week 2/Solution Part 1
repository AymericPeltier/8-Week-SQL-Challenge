-- Data with Danny - 8 Week Challenge (Week 2)
-- https://8weeksqlchallenge.com/case-study-2/

--PART 1: PIZZA METRICS !

--1) How many pizzas were ordered?
--2) How many unique customer orders were made?
--3) How many successful orders were delivered by each runner?
--4) How many of each type of pizza was delivered?
--5) How many Vegetarian and Meatlovers were ordered by each customer?
--6) What was the maximum number of pizzas delivered in a single order?
--7) For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
--8) How many pizzas were delivered that had both exclusions and extras?
--9) What was the total volume of pizzas ordered for each hour of the day?
--10) What was the volume of orders for each day of the week?


--------------------------------------------------------------------------------------------------------------------------------------------------------
-- **Schema (PostgreSQL v13)**

    DROP TABLE IF EXISTS runners;
    CREATE TABLE runners (
      "runner_id" INTEGER,
      "registration_date" DATE
    );
    INSERT INTO runners
      ("runner_id", "registration_date")
    VALUES
      (1, '2021-01-01'),
      (2, '2021-01-03'),
      (3, '2021-01-08'),
      (4, '2021-01-15');
    
    
    DROP TABLE IF EXISTS customer_orders;
    CREATE TABLE customer_orders (
      "order_id" INTEGER,
      "customer_id" INTEGER,
      "pizza_id" INTEGER,
      "exclusions" VARCHAR(4),
      "extras" VARCHAR(4),
      "order_time" TIMESTAMP
    );
    
    INSERT INTO customer_orders
      ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
    VALUES
      ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
      ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
      ('3', '102', '1', '', '', '2020-01-02 12:51:23'),
      ('3', '102', '2', '', NULL, '2020-01-02 12:51:23'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
      ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
      ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
      ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
      ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
      ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
      ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
      ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');
    
    
    DROP TABLE IF EXISTS runner_orders;
    CREATE TABLE runner_orders (
      "order_id" INTEGER,
      "runner_id" INTEGER,
      "pickup_time" VARCHAR(19),
      "distance" VARCHAR(7),
      "duration" VARCHAR(10),
      "cancellation" VARCHAR(23)
    );
    
    INSERT INTO runner_orders
      ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
    VALUES
      ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
      ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
      ('3', '1', '2020-01-02 00:12:37', '13.4km', '20 mins', NULL),
      ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
      ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
      ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
      ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
      ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
      ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
      ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');
    
    
    DROP TABLE IF EXISTS pizza_names;
    CREATE TABLE pizza_names (
      "pizza_id" INTEGER,
      "pizza_name" TEXT
    );
    INSERT INTO pizza_names
      ("pizza_id", "pizza_name")
    VALUES
      (1, 'Meatlovers'),
      (2, 'Vegetarian');
    
    
    DROP TABLE IF EXISTS pizza_recipes;
    CREATE TABLE pizza_recipes (
      "pizza_id" INTEGER,
      "toppings" TEXT
    );
    INSERT INTO pizza_recipes
      ("pizza_id", "toppings")
    VALUES
      (1, '1, 2, 3, 4, 5, 6, 8, 10'),
      (2, '4, 6, 7, 9, 11, 12');
    
    
    DROP TABLE IF EXISTS pizza_toppings;
    CREATE TABLE pizza_toppings (
      "topping_id" INTEGER,
      "topping_name" TEXT
    );
    INSERT INTO pizza_toppings
      ("topping_id", "topping_name")
    VALUES
      (1, 'Bacon'),
      (2, 'BBQ Sauce'),
      (3, 'Beef'),
      (4, 'Cheese'),
      (5, 'Chicken'),
      (6, 'Mushrooms'),
      (7, 'Onions'),
      (8, 'Pepperoni'),
      (9, 'Peppers'),
      (10, 'Salami'),
      (11, 'Tomatoes'),
      (12, 'Tomato Sauce');

--------------------------------------------------------------------------------------------------------------------------------------------------------
-- BEFORE ANSWERING THE QUESTIONS, LET'S BEGIN BY FIXING THE TABLES

    DROP TABLE IF EXISTS customer_orders_cleaned;
    CREATE TEMP TABLE customer_orders_cleaned AS
    SELECT
      DISTINCT order_id,
      customer_id,
      pizza_id,
      CASE
        WHEN exclusions = '' THEN NULL
        WHEN exclusions = 'null' THEN NULL
        ELSE exclusions END as exclusions,
      CASE
        WHEN extras = '' THEN NULL
        WHEN extras = 'null' THEN NULL
        ELSE extras END as extras,
      order_time
    FROM
      customer_orders;

    DROP TABLE IF EXISTS runner_orders_cleaned;
    CREATE TEMP TABLE runner_orders_cleaned AS WITH first_layer AS (
      SELECT
        order_id,
        runner_id,
        CAST(
          CASE
            WHEN pickup_time = 'null' THEN NULL
            ELSE pickup_time
          END AS timestamp
        ) AS pickup_time,
        CASE
          WHEN distance = '' THEN NULL
          WHEN distance = 'null' THEN NULL
          ELSE distance
        END as distance,
        CASE
          WHEN duration = '' THEN NULL
          WHEN duration = 'null' THEN NULL
          ELSE duration
        END as duration,
        CASE
          WHEN cancellation = '' THEN NULL
          WHEN cancellation = 'null' THEN NULL
          ELSE cancellation
        END as cancellation
      FROM
        runner_orders
    )
    SELECT
      order_id,
      runner_id,
      pickup_time,
      CAST( regexp_replace(distance, '[a-z]+', '' ) AS DECIMAL(5,2) ) AS distance,
    	CAST( regexp_replace(duration, '[a-z]+', '' ) AS INT ) AS duration,
    	cancellation
    FROM
      first_layer;

----------------------------------------------------------

**Schema (PostgreSQL v13)**

    DROP TABLE IF EXISTS runners;
    CREATE TABLE runners (
      "runner_id" INTEGER,
      "registration_date" DATE
    );
    INSERT INTO runners
      ("runner_id", "registration_date")
    VALUES
      (1, '2021-01-01'),
      (2, '2021-01-03'),
      (3, '2021-01-08'),
      (4, '2021-01-15');
    
    
    DROP TABLE IF EXISTS customer_orders;
    CREATE TABLE customer_orders (
      "order_id" INTEGER,
      "customer_id" INTEGER,
      "pizza_id" INTEGER,
      "exclusions" VARCHAR(4),
      "extras" VARCHAR(4),
      "order_time" TIMESTAMP
    );
    
    INSERT INTO customer_orders
      ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
    VALUES
      ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
      ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
      ('3', '102', '1', '', '', '2020-01-02 12:51:23'),
      ('3', '102', '2', '', NULL, '2020-01-02 12:51:23'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
      ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
      ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
      ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
      ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
      ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
      ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
      ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');
    
    
    DROP TABLE IF EXISTS runner_orders;
    CREATE TABLE runner_orders (
      "order_id" INTEGER,
      "runner_id" INTEGER,
      "pickup_time" VARCHAR(19),
      "distance" VARCHAR(7),
      "duration" VARCHAR(10),
      "cancellation" VARCHAR(23)
    );
    
    INSERT INTO runner_orders
      ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
    VALUES
      ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
      ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
      ('3', '1', '2020-01-02 00:12:37', '13.4km', '20 mins', NULL),
      ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
      ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
      ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
      ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
      ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
      ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
      ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');
    
    
    DROP TABLE IF EXISTS pizza_names;
    CREATE TABLE pizza_names (
      "pizza_id" INTEGER,
      "pizza_name" TEXT
    );
    INSERT INTO pizza_names
      ("pizza_id", "pizza_name")
    VALUES
      (1, 'Meatlovers'),
      (2, 'Vegetarian');
    
    
    DROP TABLE IF EXISTS pizza_recipes;
    CREATE TABLE pizza_recipes (
      "pizza_id" INTEGER,
      "toppings" TEXT
    );
    INSERT INTO pizza_recipes
      ("pizza_id", "toppings")
    VALUES
      (1, '1, 2, 3, 4, 5, 6, 8, 10'),
      (2, '4, 6, 7, 9, 11, 12');
    
    
    DROP TABLE IF EXISTS pizza_toppings;
    CREATE TABLE pizza_toppings (
      "topping_id" INTEGER,
      "topping_name" TEXT
    );
    INSERT INTO pizza_toppings
      ("topping_id", "topping_name")
    VALUES
      (1, 'Bacon'),
      (2, 'BBQ Sauce'),
      (3, 'Beef'),
      (4, 'Cheese'),
      (5, 'Chicken'),
      (6, 'Mushrooms'),
      (7, 'Onions'),
      (8, 'Pepperoni'),
      (9, 'Peppers'),
      (10, 'Salami'),
      (11, 'Tomatoes'),
      (12, 'Tomato Sauce');

---

**Query #1**

    DROP TABLE IF EXISTS customer_orders_cleaned;

There are no results to be displayed.

---
**Query #2**

    CREATE TEMP TABLE customer_orders_cleaned AS
    SELECT
      DISTINCT order_id,
      customer_id,
      pizza_id,
      CASE
        WHEN exclusions = '' THEN NULL
        WHEN exclusions = 'null' THEN NULL
        ELSE exclusions END as exclusions,
      CASE
        WHEN extras = '' THEN NULL
        WHEN extras = 'null' THEN NULL
        ELSE extras END as extras,
      order_time
    FROM
      customer_orders;

There are no results to be displayed.

---
**Query #3**

    DROP TABLE IF EXISTS runner_orders_cleaned;

There are no results to be displayed.

---
**Query #4**

    CREATE TEMP TABLE runner_orders_cleaned AS WITH first_layer AS (
      SELECT
        order_id,
        runner_id,
        CAST(
          CASE
            WHEN pickup_time = 'null' THEN NULL
            ELSE pickup_time
          END AS timestamp
        ) AS pickup_time,
        CASE
          WHEN distance = '' THEN NULL
          WHEN distance = 'null' THEN NULL
          ELSE distance
        END as distance,
        CASE
          WHEN duration = '' THEN NULL
          WHEN duration = 'null' THEN NULL
          ELSE duration
        END as duration,
        CASE
          WHEN cancellation = '' THEN NULL
          WHEN cancellation = 'null' THEN NULL
          ELSE cancellation
        END as cancellation
      FROM
        runner_orders
    )
    SELECT
      order_id,
      runner_id,
      pickup_time,
      CAST( regexp_replace(distance, '[a-z]+', '' ) AS DECIMAL(5,2) ) AS distance,
    	CAST( regexp_replace(duration, '[a-z]+', '' ) AS INT ) AS duration,
    	cancellation
    FROM
      first_layer;

There are no results to be displayed.

---
**Query #5**

    SELECT
      COUNT(pizza_id) AS number_of_pizza_ordered
    FROM 
      customer_orders_cleaned;

| number_of_pizza_ordered |
| ----------------------- |
| 13                      |

---
**Query #6**

    SELECT
      COUNT(DISTINCT order_id) AS distinct_orders
    FROM
      customer_orders_cleaned;

| distinct_orders |
| --------------- |
| 10              |

---
**Query #7**

    SELECT
      COUNT(order_id) AS distinct_orders
    FROM 
      runner_orders_cleaned
    WHERE
      cancellation IS NULL;

| distinct_orders |
| --------------- |
| 8               |

---
**Query #8**

    SELECT
      C.pizza_id,
      COUNT(C.pizza_id) as pizza_delivered
    FROM
      customer_orders_cleaned AS C
      LEFT JOIN runner_orders_cleaned AS R ON C.order_id = R.order_id
    WHERE
      R.cancellation IS NULL
    GROUP BY
      pizza_id;

| pizza_id | pizza_delivered |
| -------- | --------------- |
| 1        | 8               |
| 2        | 3               |

---
**Query #9**

    SELECT
      customer_id,
      SUM(CASE WHEN pizza_id = 1 THEN 1 ELSE 0 END) as meatlovers,
      SUM(CASE WHEN pizza_id = 2 THEN 1 ELSE 0 END) as vegetarians
    FROM 
      customer_orders_cleaned
    GROUP BY
      customer_id
    ORDER BY
      customer_id;

| customer_id | meatlovers | vegetarians |
| ----------- | ---------- | ----------- |
| 101         | 2          | 1           |
| 102         | 2          | 1           |
| 103         | 2          | 1           |
| 104         | 3          | 0           |
| 105         | 0          | 1           |

---
**Query #10**

    SELECT
      order_id,
      COUNT(pizza_id) as pizzas_delivered
    FROM 
      customer_orders_cleaned
    GROUP BY
      order_id
    ORDER BY
      pizzas_delivered DESC;

| order_id | pizzas_delivered |
| -------- | ---------------- |
| 10       | 2                |
| 3        | 2                |
| 4        | 2                |
| 2        | 1                |
| 7        | 1                |
| 1        | 1                |
| 9        | 1                |
| 8        | 1                |
| 5        | 1                |
| 6        | 1                |

---
**Query #11**

    SELECT
      customer_id,
      SUM(CASE WHEN (exclusions IS NOT NULL OR extras IS NOT NULL) THEN 1 ELSE 0 END) as changes_performed,
      SUM(CASE WHEN (exclusions IS NULL AND extras IS NULL) THEN 1 ELSE 0 END) as no_changes
    FROM 
      customer_orders_cleaned
    GROUP BY
      customer_id
    ORDER BY
      customer_id;

| customer_id | changes_performed | no_changes |
| ----------- | ----------------- | ---------- |
| 101         | 0                 | 3          |
| 102         | 0                 | 3          |
| 103         | 3                 | 0          |
| 104         | 2                 | 1          |
| 105         | 1                 | 0          |

---
**Query #12**

    SELECT
      SUM(CASE WHEN (exclusions IS NOT NULL AND extras IS NOT NULL) THEN 1 ELSE 0 END) as exclusions_and_extra
    FROM 
      customer_orders_cleaned;

| exclusions_and_extra |
| -------------------- |
| 2                    |

---
**Query #13**

    SELECT
      extract(hour from order_time)                                              AS order_hour,
      COUNT(extract(hour from order_time))                                       AS count_pizza_ordered,
      ROUND( 100 * COUNT(extract(hour from order_time))/SUM(COUNT(*)) OVER (),2) AS volume_pizza_ordered
    FROM 
      customer_orders_cleaned
    GROUP BY
      order_hour
    ORDER BY
      order_hour;

| order_hour | count_pizza_ordered | volume_pizza_ordered |
| ---------- | ------------------- | -------------------- |
| 11         | 1                   | 7.69                 |
| 12         | 2                   | 15.38                |
| 13         | 2                   | 15.38                |
| 18         | 3                   | 23.08                |
| 19         | 1                   | 7.69                 |
| 21         | 3                   | 23.08                |
| 23         | 1                   | 7.69                 |

---
**Query #14**

    SELECT
      to_char(order_time, 'Day')                                              AS day_ordered,
      COUNT(to_char(order_time, 'Day'))                                       AS count_pizza_ordered,
      ROUND( 100 * COUNT(to_char(order_time, 'Day'))/SUM(COUNT(*)) OVER (),2) AS volume_pizza_ordered
    FROM 
      customer_orders_cleaned
    GROUP BY
      day_ordered
    ORDER BY
      day_ordered;

| day_ordered | count_pizza_ordered | volume_pizza_ordered |
| ----------- | ------------------- | -------------------- |
| Friday      | 1                   | 7.69                 |
| Saturday    | 4                   | 30.77                |
| Thursday    | 3                   | 23.08                |
| Wednesday   | 5                   | 38.46                |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/7VcQKQwsS3CTkGRFG7vu98/4)
